
sensor_board_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d30  08003d30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d30  08003d30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d34  08003d34  00013d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000000c  08003d44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003d44  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9ec  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276d  00000000  00000000  0002da21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00030190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  00030f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183bf  00000000  00000000  00031b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc49  00000000  00000000  00049ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c15a  00000000  00000000  00059b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5c9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003650  00000000  00000000  000e5cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cd8 	.word	0x08003cd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003cd8 	.word	0x08003cd8

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b21      	ldr	r3, [pc, #132]	; (80001e4 <MX_ADC1_Init+0x98>)
 800015e:	4a22      	ldr	r2, [pc, #136]	; (80001e8 <MX_ADC1_Init+0x9c>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000162:	4b20      	ldr	r3, [pc, #128]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016a:	4b1e      	ldr	r3, [pc, #120]	; (80001e4 <MX_ADC1_Init+0x98>)
 800016c:	2201      	movs	r2, #1
 800016e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	4b1c      	ldr	r3, [pc, #112]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000176:	4b1b      	ldr	r3, [pc, #108]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017e:	4b19      	ldr	r3, [pc, #100]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000180:	2200      	movs	r2, #0
 8000182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000184:	4b17      	ldr	r3, [pc, #92]	; (80001e4 <MX_ADC1_Init+0x98>)
 8000186:	2202      	movs	r2, #2
 8000188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018a:	4816      	ldr	r0, [pc, #88]	; (80001e4 <MX_ADC1_Init+0x98>)
 800018c:	f000 fe62 	bl	8000e54 <HAL_ADC_Init>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d001      	beq.n	800019a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000196:	f000 fbad 	bl	80008f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800019a:	2300      	movs	r3, #0
 800019c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019e:	2301      	movs	r3, #1
 80001a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a2:	2307      	movs	r3, #7
 80001a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	4619      	mov	r1, r3
 80001aa:	480e      	ldr	r0, [pc, #56]	; (80001e4 <MX_ADC1_Init+0x98>)
 80001ac:	f001 f824 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fb9d 	bl	80008f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80001ba:	2301      	movs	r3, #1
 80001bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001be:	2302      	movs	r3, #2
 80001c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	1d3b      	adds	r3, r7, #4
 80001c8:	4619      	mov	r1, r3
 80001ca:	4806      	ldr	r0, [pc, #24]	; (80001e4 <MX_ADC1_Init+0x98>)
 80001cc:	f001 f814 	bl	80011f8 <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80001d6:	f000 fb8d 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001da:	bf00      	nop
 80001dc:	3710      	adds	r7, #16
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20000028 	.word	0x20000028
 80001e8:	40012400 	.word	0x40012400

080001ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	605a      	str	r2, [r3, #4]
 80001fe:	609a      	str	r2, [r3, #8]
 8000200:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a29      	ldr	r2, [pc, #164]	; (80002ac <HAL_ADC_MspInit+0xc0>)
 8000208:	4293      	cmp	r3, r2
 800020a:	d14a      	bne.n	80002a2 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	4a27      	ldr	r2, [pc, #156]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 8000212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000216:	6193      	str	r3, [r2, #24]
 8000218:	4b25      	ldr	r3, [pc, #148]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a21      	ldr	r2, [pc, #132]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <HAL_ADC_MspInit+0xc4>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0304 	and.w	r3, r3, #4
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800023c:	2303      	movs	r3, #3
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000240:	2303      	movs	r3, #3
 8000242:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000244:	f107 0310 	add.w	r3, r7, #16
 8000248:	4619      	mov	r1, r3
 800024a:	481a      	ldr	r0, [pc, #104]	; (80002b4 <HAL_ADC_MspInit+0xc8>)
 800024c:	f002 fbb8 	bl	80029c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000250:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <HAL_ADC_MspInit+0xd0>)
 8000254:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000256:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000262:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000264:	2280      	movs	r2, #128	; 0x80
 8000266:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000268:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800026a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800026e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000276:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800027a:	2220      	movs	r2, #32
 800027c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000280:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000284:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000286:	480c      	ldr	r0, [pc, #48]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 8000288:	f002 f9ac 	bl	80025e4 <HAL_DMA_Init>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000292:	f000 fb2f 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a07      	ldr	r2, [pc, #28]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800029a:	621a      	str	r2, [r3, #32]
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <HAL_ADC_MspInit+0xcc>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80002a2:	bf00      	nop
 80002a4:	3720      	adds	r7, #32
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40012400 	.word	0x40012400
 80002b0:	40021000 	.word	0x40021000
 80002b4:	40010800 	.word	0x40010800
 80002b8:	20000058 	.word	0x20000058
 80002bc:	40020008 	.word	0x40020008

080002c0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	; 0x28
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80002c6:	4b26      	ldr	r3, [pc, #152]	; (8000360 <MX_CAN_Init+0xa0>)
 80002c8:	4a26      	ldr	r2, [pc, #152]	; (8000364 <MX_CAN_Init+0xa4>)
 80002ca:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80002cc:	4b24      	ldr	r3, [pc, #144]	; (8000360 <MX_CAN_Init+0xa0>)
 80002ce:	2209      	movs	r2, #9
 80002d0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002d2:	4b23      	ldr	r3, [pc, #140]	; (8000360 <MX_CAN_Init+0xa0>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002d8:	4b21      	ldr	r3, [pc, #132]	; (8000360 <MX_CAN_Init+0xa0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80002de:	4b20      	ldr	r3, [pc, #128]	; (8000360 <MX_CAN_Init+0xa0>)
 80002e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80002e4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <MX_CAN_Init+0xa0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002ec:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <MX_CAN_Init+0xa0>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <MX_CAN_Init+0xa0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <MX_CAN_Init+0xa0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_CAN_Init+0xa0>)
 8000300:	2200      	movs	r2, #0
 8000302:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <MX_CAN_Init+0xa0>)
 8000306:	2200      	movs	r2, #0
 8000308:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_CAN_Init+0xa0>)
 800030c:	2200      	movs	r2, #0
 800030e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000310:	4813      	ldr	r0, [pc, #76]	; (8000360 <MX_CAN_Init+0xa0>)
 8000312:	f001 fa19 	bl	8001748 <HAL_CAN_Init>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800031c:	f000 faea 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000320:	2301      	movs	r3, #1
 8000322:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000324:	230a      	movs	r3, #10
 8000326:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000328:	2301      	movs	r3, #1
 800032a:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x111<<5;
 800032c:	f242 2320 	movw	r3, #8736	; 0x2220
 8000330:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x111<<5;
 8000336:	f242 2320 	movw	r3, #8736	; 0x2220
 800033a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000344:	2301      	movs	r3, #1
 8000346:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 8000348:	2300      	movs	r3, #0
 800034a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800034c:	463b      	mov	r3, r7
 800034e:	4619      	mov	r1, r3
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <MX_CAN_Init+0xa0>)
 8000352:	f001 faf4 	bl	800193e <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	3728      	adds	r7, #40	; 0x28
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000009c 	.word	0x2000009c
 8000364:	40006400 	.word	0x40006400

08000368 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4a20      	ldr	r2, [pc, #128]	; (8000404 <HAL_CAN_MspInit+0x9c>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d139      	bne.n	80003fc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000388:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <HAL_CAN_MspInit+0xa0>)
 800038a:	69db      	ldr	r3, [r3, #28]
 800038c:	4a1e      	ldr	r2, [pc, #120]	; (8000408 <HAL_CAN_MspInit+0xa0>)
 800038e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000392:	61d3      	str	r3, [r2, #28]
 8000394:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <HAL_CAN_MspInit+0xa0>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b19      	ldr	r3, [pc, #100]	; (8000408 <HAL_CAN_MspInit+0xa0>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a18      	ldr	r2, [pc, #96]	; (8000408 <HAL_CAN_MspInit+0xa0>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <HAL_CAN_MspInit+0xa0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	60bb      	str	r3, [r7, #8]
 80003b6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	4619      	mov	r1, r3
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <HAL_CAN_MspInit+0xa4>)
 80003ce:	f002 faf7 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d8:	2302      	movs	r3, #2
 80003da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003dc:	2303      	movs	r3, #3
 80003de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	4809      	ldr	r0, [pc, #36]	; (800040c <HAL_CAN_MspInit+0xa4>)
 80003e8:	f002 faea 	bl	80029c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2100      	movs	r1, #0
 80003f0:	2015      	movs	r0, #21
 80003f2:	f002 f8c0 	bl	8002576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80003f6:	2015      	movs	r0, #21
 80003f8:	f002 f8d9 	bl	80025ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40006400 	.word	0x40006400
 8000408:	40021000 	.word	0x40021000
 800040c:	40010800 	.word	0x40010800

08000410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <MX_DMA_Init+0x38>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a0b      	ldr	r2, [pc, #44]	; (8000448 <MX_DMA_Init+0x38>)
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <MX_DMA_Init+0x38>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	2100      	movs	r1, #0
 8000432:	200b      	movs	r0, #11
 8000434:	f002 f89f 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000438:	200b      	movs	r0, #11
 800043a:	f002 f8b8 	bl	80025ae <HAL_NVIC_EnableIRQ>

}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000

0800044c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000460:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <MX_GPIO_Init+0x108>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a3b      	ldr	r2, [pc, #236]	; (8000554 <MX_GPIO_Init+0x108>)
 8000466:	f043 0310 	orr.w	r3, r3, #16
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b39      	ldr	r3, [pc, #228]	; (8000554 <MX_GPIO_Init+0x108>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0310 	and.w	r3, r3, #16
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000478:	4b36      	ldr	r3, [pc, #216]	; (8000554 <MX_GPIO_Init+0x108>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a35      	ldr	r2, [pc, #212]	; (8000554 <MX_GPIO_Init+0x108>)
 800047e:	f043 0320 	orr.w	r3, r3, #32
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b33      	ldr	r3, [pc, #204]	; (8000554 <MX_GPIO_Init+0x108>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0320 	and.w	r3, r3, #32
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b30      	ldr	r3, [pc, #192]	; (8000554 <MX_GPIO_Init+0x108>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a2f      	ldr	r2, [pc, #188]	; (8000554 <MX_GPIO_Init+0x108>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <MX_GPIO_Init+0x108>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a8:	4b2a      	ldr	r3, [pc, #168]	; (8000554 <MX_GPIO_Init+0x108>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a29      	ldr	r2, [pc, #164]	; (8000554 <MX_GPIO_Init+0x108>)
 80004ae:	f043 0308 	orr.w	r3, r3, #8
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b27      	ldr	r3, [pc, #156]	; (8000554 <MX_GPIO_Init+0x108>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0308 	and.w	r3, r3, #8
 80004bc:	603b      	str	r3, [r7, #0]
 80004be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c6:	4824      	ldr	r0, [pc, #144]	; (8000558 <MX_GPIO_Init+0x10c>)
 80004c8:	f002 fc15 	bl	8002cf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2302      	movs	r3, #2
 80004dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	4619      	mov	r1, r3
 80004e4:	481c      	ldr	r0, [pc, #112]	; (8000558 <MX_GPIO_Init+0x10c>)
 80004e6:	f002 fa6b 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin;
 80004ea:	233c      	movs	r3, #60	; 0x3c
 80004ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ee:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_GPIO_Init+0x110>)
 80004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	4818      	ldr	r0, [pc, #96]	; (8000560 <MX_GPIO_Init+0x114>)
 80004fe:	f002 fa5f 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = BTN5_Pin|BTN6_Pin|BTN7_Pin|BTN8_Pin
 8000502:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000506:	613b      	str	r3, [r7, #16]
                          |BTN9_Pin|BTN10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_GPIO_Init+0x110>)
 800050a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	4813      	ldr	r0, [pc, #76]	; (8000564 <MX_GPIO_Init+0x118>)
 8000518:	f002 fa52 	bl	80029c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800051c:	2200      	movs	r2, #0
 800051e:	2100      	movs	r1, #0
 8000520:	2008      	movs	r0, #8
 8000522:	f002 f828 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000526:	2008      	movs	r0, #8
 8000528:	f002 f841 	bl	80025ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2009      	movs	r0, #9
 8000532:	f002 f820 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000536:	2009      	movs	r0, #9
 8000538:	f002 f839 	bl	80025ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	200a      	movs	r0, #10
 8000542:	f002 f818 	bl	8002576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000546:	200a      	movs	r0, #10
 8000548:	f002 f831 	bl	80025ae <HAL_NVIC_EnableIRQ>

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000
 8000558:	40011000 	.word	0x40011000
 800055c:	10110000 	.word	0x10110000
 8000560:	40010800 	.word	0x40010800
 8000564:	40010c00 	.word	0x40010c00

08000568 <HAL_CAN_RxFifo1MsgPendingCallback>:

	return (float)((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8000572:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8000574:	2101      	movs	r1, #1
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f001 fbbd 	bl	8001cf6 <HAL_CAN_GetRxMessage>
	cntt++;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8000586:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 8000588:	e007      	b.n	800059a <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	480e      	ldr	r0, [pc, #56]	; (80005c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8000590:	f002 fbc9 	bl	8002d26 <HAL_GPIO_TogglePin>
		cntt = 0;
 8000594:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0)
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b64      	cmp	r3, #100	; 0x64
 80005a0:	d8f3      	bhi.n	800058a <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	}
	if(RxHeader.StdId == 0x111){
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f240 1211 	movw	r2, #273	; 0x111
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d102      	bne.n	80005b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
		flag = 1;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <HAL_CAN_RxFifo1MsgPendingCallback+0x64>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	701a      	strb	r2, [r3, #0]
	}

}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000f8 	.word	0x200000f8
 80005c0:	200000dc 	.word	0x200000dc
 80005c4:	200000d0 	.word	0x200000d0
 80005c8:	40011000 	.word	0x40011000
 80005cc:	200000ce 	.word	0x200000ce

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fbdc 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f8ea 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f7ff ff36 	bl	800044c <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f7ff ff16 	bl	8000410 <MX_DMA_Init>
  MX_ADC1_Init();
 80005e4:	f7ff fdb2 	bl	800014c <MX_ADC1_Init>
  MX_CAN_Init();
 80005e8:	f7ff fe6a 	bl	80002c0 <MX_CAN_Init>
  MX_TIM1_Init();
 80005ec:	f000 fa10 	bl	8000a10 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005f0:	f000 fa66 	bl	8000ac0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005f4:	f000 fab8 	bl	8000b68 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80005f8:	213c      	movs	r1, #60	; 0x3c
 80005fa:	4856      	ldr	r0, [pc, #344]	; (8000754 <main+0x184>)
 80005fc:	f003 f9ce 	bl	800399c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000600:	213c      	movs	r1, #60	; 0x3c
 8000602:	4855      	ldr	r0, [pc, #340]	; (8000758 <main+0x188>)
 8000604:	f003 f9ca 	bl	800399c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000608:	213c      	movs	r1, #60	; 0x3c
 800060a:	4854      	ldr	r0, [pc, #336]	; (800075c <main+0x18c>)
 800060c:	f003 f9c6 	bl	800399c <HAL_TIM_Encoder_Start>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000610:	4853      	ldr	r0, [pc, #332]	; (8000760 <main+0x190>)
 8000612:	f000 ffeb 	bl	80015ec <HAL_ADCEx_Calibration_Start>
  	HAL_ADC_Start_DMA(&hadc1, &AD_RES, 2);
 8000616:	2202      	movs	r2, #2
 8000618:	4952      	ldr	r1, [pc, #328]	; (8000764 <main+0x194>)
 800061a:	4851      	ldr	r0, [pc, #324]	; (8000760 <main+0x190>)
 800061c:	f000 fcf2 	bl	8001004 <HAL_ADC_Start_DMA>


  	HAL_CAN_Start(&hcan);
 8000620:	4851      	ldr	r0, [pc, #324]	; (8000768 <main+0x198>)
 8000622:	f001 fa55 	bl	8001ad0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000626:	2110      	movs	r1, #16
 8000628:	484f      	ldr	r0, [pc, #316]	; (8000768 <main+0x198>)
 800062a:	f001 fc85 	bl	8001f38 <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 8; // data length
 800062e:	4b4f      	ldr	r3, [pc, #316]	; (800076c <main+0x19c>)
 8000630:	2208      	movs	r2, #8
 8000632:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8000634:	4b4d      	ldr	r3, [pc, #308]	; (800076c <main+0x19c>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800063a:	4b4c      	ldr	r3, [pc, #304]	; (800076c <main+0x19c>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x333; // ID
 8000640:	4b4a      	ldr	r3, [pc, #296]	; (800076c <main+0x19c>)
 8000642:	f240 3233 	movw	r2, #819	; 0x333
 8000646:	601a      	str	r2, [r3, #0]

	TxHeader2.DLC = 2; // data length
 8000648:	4b49      	ldr	r3, [pc, #292]	; (8000770 <main+0x1a0>)
 800064a:	2202      	movs	r2, #2
 800064c:	611a      	str	r2, [r3, #16]
	TxHeader2.IDE = CAN_ID_STD;
 800064e:	4b48      	ldr	r3, [pc, #288]	; (8000770 <main+0x1a0>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 8000654:	4b46      	ldr	r3, [pc, #280]	; (8000770 <main+0x1a0>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x444; // ID
 800065a:	4b45      	ldr	r3, [pc, #276]	; (8000770 <main+0x1a0>)
 800065c:	f240 4244 	movw	r2, #1092	; 0x444
 8000660:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	pub_adc = AD_RES[1];
 8000662:	4b40      	ldr	r3, [pc, #256]	; (8000764 <main+0x194>)
 8000664:	885a      	ldrh	r2, [r3, #2]
 8000666:	4b43      	ldr	r3, [pc, #268]	; (8000774 <main+0x1a4>)
 8000668:	801a      	strh	r2, [r3, #0]

	  	Enc_count[0] = TIM3->CNT;
 800066a:	4b43      	ldr	r3, [pc, #268]	; (8000778 <main+0x1a8>)
 800066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <main+0x1ac>)
 8000672:	801a      	strh	r2, [r3, #0]
	  	Enc_count[1] = TIM4->CNT;
 8000674:	4b42      	ldr	r3, [pc, #264]	; (8000780 <main+0x1b0>)
 8000676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b40      	ldr	r3, [pc, #256]	; (800077c <main+0x1ac>)
 800067c:	805a      	strh	r2, [r3, #2]
	  	Enc_count[2] = TIM1->CNT;
 800067e:	4b41      	ldr	r3, [pc, #260]	; (8000784 <main+0x1b4>)
 8000680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b3d      	ldr	r3, [pc, #244]	; (800077c <main+0x1ac>)
 8000686:	809a      	strh	r2, [r3, #4]

		TxData[0] = ((Enc_count[0] & 0xFF00) >> 8);
 8000688:	4b3c      	ldr	r3, [pc, #240]	; (800077c <main+0x1ac>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	b29b      	uxth	r3, r3
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <main+0x1b8>)
 8000694:	701a      	strb	r2, [r3, #0]
		TxData[1] = (Enc_count[0] & 0x00FF);
 8000696:	4b39      	ldr	r3, [pc, #228]	; (800077c <main+0x1ac>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b3a      	ldr	r3, [pc, #232]	; (8000788 <main+0x1b8>)
 800069e:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((Enc_count[1] & 0xFF00) >> 8);
 80006a0:	4b36      	ldr	r3, [pc, #216]	; (800077c <main+0x1ac>)
 80006a2:	885b      	ldrh	r3, [r3, #2]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b37      	ldr	r3, [pc, #220]	; (8000788 <main+0x1b8>)
 80006ac:	709a      	strb	r2, [r3, #2]
		TxData[3] = (Enc_count[1] & 0x00FF);
 80006ae:	4b33      	ldr	r3, [pc, #204]	; (800077c <main+0x1ac>)
 80006b0:	885b      	ldrh	r3, [r3, #2]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <main+0x1b8>)
 80006b6:	70da      	strb	r2, [r3, #3]
		TxData[4] = ((Enc_count[2] & 0xFF00) >> 8);
 80006b8:	4b30      	ldr	r3, [pc, #192]	; (800077c <main+0x1ac>)
 80006ba:	889b      	ldrh	r3, [r3, #4]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b29b      	uxth	r3, r3
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <main+0x1b8>)
 80006c4:	711a      	strb	r2, [r3, #4]
		TxData[5] = (Enc_count[2] & 0x00FF);
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <main+0x1ac>)
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <main+0x1b8>)
 80006ce:	715a      	strb	r2, [r3, #5]
		TxData[6] = ((pub_adc & 0xFF00) >> 8);
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <main+0x1a4>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	0a1b      	lsrs	r3, r3, #8
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <main+0x1b8>)
 80006dc:	719a      	strb	r2, [r3, #6]
		TxData[7] = (pub_adc & 0x00FF);
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <main+0x1a4>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <main+0x1b8>)
 80006e6:	71da      	strb	r2, [r3, #7]

		if(flag == 1){
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <main+0x1bc>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d108      	bne.n	8000702 <main+0x132>
			HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <main+0x1c0>)
 80006f2:	4a25      	ldr	r2, [pc, #148]	; (8000788 <main+0x1b8>)
 80006f4:	491d      	ldr	r1, [pc, #116]	; (800076c <main+0x19c>)
 80006f6:	481c      	ldr	r0, [pc, #112]	; (8000768 <main+0x198>)
 80006f8:	f001 fa2e 	bl	8001b58 <HAL_CAN_AddTxMessage>
			flag = 0;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <main+0x1bc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
		}

		if (flag_exti == 1 && (BTN != old_BTN || BTN2 != old_BTN2)){  ///  && HAL_GetTick() - time_read > 200
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <main+0x1c4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d1ab      	bne.n	8000662 <main+0x92>
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <main+0x1c8>)
 800070c:	781a      	ldrb	r2, [r3, #0]
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <main+0x1cc>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	429a      	cmp	r2, r3
 8000714:	d105      	bne.n	8000722 <main+0x152>
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <main+0x1d0>)
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <main+0x1d4>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	429a      	cmp	r2, r3
 8000720:	d09f      	beq.n	8000662 <main+0x92>
			HAL_CAN_AddTxMessage(&hcan, &TxHeader2, TxData2, &TxMailbox);
 8000722:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <main+0x1c0>)
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <main+0x1d8>)
 8000726:	4912      	ldr	r1, [pc, #72]	; (8000770 <main+0x1a0>)
 8000728:	480f      	ldr	r0, [pc, #60]	; (8000768 <main+0x198>)
 800072a:	f001 fa15 	bl	8001b58 <HAL_CAN_AddTxMessage>
			flag_exti = 0;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <main+0x1c4>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
			time_read = HAL_GetTick();
 8000734:	f000 fb84 	bl	8000e40 <HAL_GetTick>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <main+0x1dc>)
 800073e:	801a      	strh	r2, [r3, #0]

			old_BTN = BTN;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0x1c8>)
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <main+0x1cc>)
 8000746:	701a      	strb	r2, [r3, #0]
			old_BTN2 = BTN2;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <main+0x1d0>)
 800074a:	781a      	ldrb	r2, [r3, #0]
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0x1d4>)
 800074e:	701a      	strb	r2, [r3, #0]
	  	pub_adc = AD_RES[1];
 8000750:	e787      	b.n	8000662 <main+0x92>
 8000752:	bf00      	nop
 8000754:	20000140 	.word	0x20000140
 8000758:	20000188 	.word	0x20000188
 800075c:	200001d0 	.word	0x200001d0
 8000760:	20000028 	.word	0x20000028
 8000764:	200000d4 	.word	0x200000d4
 8000768:	2000009c 	.word	0x2000009c
 800076c:	20000100 	.word	0x20000100
 8000770:	20000118 	.word	0x20000118
 8000774:	200000d8 	.word	0x200000d8
 8000778:	40000400 	.word	0x40000400
 800077c:	200000c4 	.word	0x200000c4
 8000780:	40000800 	.word	0x40000800
 8000784:	40012c00 	.word	0x40012c00
 8000788:	20000130 	.word	0x20000130
 800078c:	200000ce 	.word	0x200000ce
 8000790:	2000013c 	.word	0x2000013c
 8000794:	200000cf 	.word	0x200000cf
 8000798:	200000ca 	.word	0x200000ca
 800079c:	200000cc 	.word	0x200000cc
 80007a0:	200000cb 	.word	0x200000cb
 80007a4:	200000cd 	.word	0x200000cd
 80007a8:	20000138 	.word	0x20000138
 80007ac:	200000da 	.word	0x200000da

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ba:	2228      	movs	r2, #40	; 0x28
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fa82 	bl	8003cc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000806:	4618      	mov	r0, r3
 8000808:	f002 fabe 	bl	8002d88 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000812:	f000 f86f 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000826:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fd2a 	bl	800328c <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800083e:	f000 f859 	bl	80008f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000842:	2302      	movs	r3, #2
 8000844:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800084a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f002 fe96 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800085a:	f000 f84b 	bl	80008f4 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3750      	adds	r7, #80	; 0x50
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	80fb      	strh	r3, [r7, #6]
//				BTN |= 1 <<0;//set bit 0 to high(1)
//			}
//			else BTN &= ~(1 << 0);//clear bit 0 to low(0)
//	}
	if(GPIO_Pin == BTN1_Pin  || BTN2_Pin){
			uint8_t bit1 = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 8000872:	2104      	movs	r1, #4
 8000874:	481a      	ldr	r0, [pc, #104]	; (80008e0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000876:	f002 fa27 	bl	8002cc8 <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]
			uint8_t bit2 = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 800087e:	2108      	movs	r1, #8
 8000880:	4817      	ldr	r0, [pc, #92]	; (80008e0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000882:	f002 fa21 	bl	8002cc8 <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	73bb      	strb	r3, [r7, #14]
			if(bit1 == true && bit2 != true){
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10a      	bne.n	80008a6 <HAL_GPIO_EXTI_Callback+0x3e>
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d007      	beq.n	80008a6 <HAL_GPIO_EXTI_Callback+0x3e>
				BTN |= 1 <<0;	//set bit 0 to high(1)
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	e00c      	b.n	80008c0 <HAL_GPIO_EXTI_Callback+0x58>
			}
			else if (bit1 != true && bit2 == true){
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d009      	beq.n	80008c0 <HAL_GPIO_EXTI_Callback+0x58>
 80008ac:	7bbb      	ldrb	r3, [r7, #14]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d106      	bne.n	80008c0 <HAL_GPIO_EXTI_Callback+0x58>
				BTN &= ~(1 << 0);	//clear bit 0 to low(0)
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	f023 0301 	bic.w	r3, r3, #1
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80008be:	701a      	strb	r2, [r3, #0]
			}
	}
	TxData2[0] = BTN;
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_GPIO_EXTI_Callback+0x80>)
 80008c6:	701a      	strb	r2, [r3, #0]
	TxData2[1] = BTN2;
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_GPIO_EXTI_Callback+0x84>)
 80008ca:	781a      	ldrb	r2, [r3, #0]
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_GPIO_EXTI_Callback+0x80>)
 80008ce:	705a      	strb	r2, [r3, #1]

	flag_exti = true;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_GPIO_EXTI_Callback+0x88>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]

}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40010800 	.word	0x40010800
 80008e4:	200000ca 	.word	0x200000ca
 80008e8:	20000138 	.word	0x20000138
 80008ec:	200000cb 	.word	0x200000cb
 80008f0:	200000cf 	.word	0x200000cf

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_MspInit+0x5c>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <HAL_MspInit+0x5c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x5c>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x5c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x5c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_MspInit+0x60>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <HAL_MspInit+0x60>)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000
 8000960:	40010000 	.word	0x40010000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009aa:	f000 fa37 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 80009b6:	2004      	movs	r0, #4
 80009b8:	f002 f9ce 	bl	8002d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80009c4:	2008      	movs	r0, #8
 80009c6:	f002 f9c7 	bl	8002d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}

080009ce <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 80009d2:	2010      	movs	r0, #16
 80009d4:	f002 f9c0 	bl	8002d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <DMA1_Channel1_IRQHandler+0x10>)
 80009e2:	f001 feb9 	bl	8002758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000058 	.word	0x20000058

080009f0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80009f4:	4802      	ldr	r0, [pc, #8]	; (8000a00 <CAN1_RX1_IRQHandler+0x10>)
 80009f6:	f001 fac4 	bl	8001f82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000009c 	.word	0x2000009c

08000a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	2224      	movs	r2, #36	; 0x24
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 f952 	bl	8003cc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_TIM1_Init+0xa8>)
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <MX_TIM1_Init+0xac>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_TIM1_Init+0xa8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_TIM1_Init+0xa8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_TIM1_Init+0xa8>)
 8000a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_TIM1_Init+0xa8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_TIM1_Init+0xa8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_TIM1_Init+0xa8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a60:	2301      	movs	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000a68:	230f      	movs	r3, #15
 8000a6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a70:	2301      	movs	r3, #1
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000a78:	230f      	movs	r3, #15
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_TIM1_Init+0xa8>)
 8000a84:	f002 fee8 	bl	8003858 <HAL_TIM_Encoder_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a8e:	f7ff ff31 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <MX_TIM1_Init+0xa8>)
 8000aa0:	f003 f890 	bl	8003bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000aaa:	f7ff ff23 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000140 	.word	0x20000140
 8000abc:	40012c00 	.word	0x40012c00

08000ac0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2224      	movs	r2, #36	; 0x24
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f003 f8fa 	bl	8003cc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000ade:	4a21      	ldr	r2, [pc, #132]	; (8000b64 <MX_TIM3_Init+0xa4>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b02:	2303      	movs	r3, #3
 8000b04:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000b12:	230f      	movs	r3, #15
 8000b14:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000b22:	230f      	movs	r3, #15
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000b2e:	f002 fe93 	bl	8003858 <HAL_TIM_Encoder_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f7ff fedc 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_TIM3_Init+0xa0>)
 8000b4a:	f003 f83b 	bl	8003bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b54:	f7ff fece 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000188 	.word	0x20000188
 8000b64:	40000400 	.word	0x40000400

08000b68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2224      	movs	r2, #36	; 0x24
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 f8a6 	bl	8003cc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b84:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MX_TIM4_Init+0xa0>)
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <MX_TIM4_Init+0xa4>)
 8000b88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b8a:	4b1f      	ldr	r3, [pc, #124]	; (8000c08 <MX_TIM4_Init+0xa0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM4_Init+0xa0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_TIM4_Init+0xa0>)
 8000b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM4_Init+0xa0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM4_Init+0xa0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000baa:	2303      	movs	r3, #3
 8000bac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000bba:	230f      	movs	r3, #15
 8000bbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000bca:	230f      	movs	r3, #15
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM4_Init+0xa0>)
 8000bd6:	f002 fe3f 	bl	8003858 <HAL_TIM_Encoder_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000be0:	f7ff fe88 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM4_Init+0xa0>)
 8000bf2:	f002 ffe7 	bl	8003bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000bfc:	f7ff fe7a 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3730      	adds	r7, #48	; 0x30
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200001d0 	.word	0x200001d0
 8000c0c:	40000800 	.word	0x40000800

08000c10 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0320 	add.w	r3, r7, #32
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a40      	ldr	r2, [pc, #256]	; (8000d2c <HAL_TIM_Encoder_MspInit+0x11c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d125      	bne.n	8000c7c <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c30:	4b3f      	ldr	r3, [pc, #252]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a3e      	ldr	r2, [pc, #248]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b3c      	ldr	r3, [pc, #240]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c48:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a38      	ldr	r2, [pc, #224]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	4619      	mov	r1, r3
 8000c74:	482f      	ldr	r0, [pc, #188]	; (8000d34 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c76:	f001 fea3 	bl	80029c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000c7a:	e052      	b.n	8000d22 <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a2d      	ldr	r2, [pc, #180]	; (8000d38 <HAL_TIM_Encoder_MspInit+0x128>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d124      	bne.n	8000cd0 <HAL_TIM_Encoder_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	4a29      	ldr	r2, [pc, #164]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	61d3      	str	r3, [r2, #28]
 8000c92:	4b27      	ldr	r3, [pc, #156]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb6:	23c0      	movs	r3, #192	; 0xc0
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481a      	ldr	r0, [pc, #104]	; (8000d34 <HAL_TIM_Encoder_MspInit+0x124>)
 8000cca:	f001 fe79 	bl	80029c0 <HAL_GPIO_Init>
}
 8000cce:	e028      	b.n	8000d22 <HAL_TIM_Encoder_MspInit+0x112>
  else if(tim_encoderHandle->Instance==TIM4)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_TIM_Encoder_MspInit+0x12c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d123      	bne.n	8000d22 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	61d3      	str	r3, [r2, #28]
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_TIM_Encoder_MspInit+0x120>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0a:	23c0      	movs	r3, #192	; 0xc0
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <HAL_TIM_Encoder_MspInit+0x130>)
 8000d1e:	f001 fe4f 	bl	80029c0 <HAL_GPIO_Init>
}
 8000d22:	bf00      	nop
 8000d24:	3730      	adds	r7, #48	; 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40012c00 	.word	0x40012c00
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010800 	.word	0x40010800
 8000d38:	40000400 	.word	0x40000400
 8000d3c:	40000800 	.word	0x40000800
 8000d40:	40010c00 	.word	0x40010c00

08000d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d44:	f7ff fe5e 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d4a:	490c      	ldr	r1, [pc, #48]	; (8000d7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d60:	4c09      	ldr	r4, [pc, #36]	; (8000d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f002 ff87 	bl	8003c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d72:	f7ff fc2d 	bl	80005d0 <main>
  bx lr
 8000d76:	4770      	bx	lr
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d80:	08003d38 	.word	0x08003d38
  ldr r2, =_sbss
 8000d84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d88:	2000021c 	.word	0x2000021c

08000d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_2_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x28>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x28>)
 8000d9a:	f043 0310 	orr.w	r3, r3, #16
 8000d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f001 fbdd 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fda8 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40022000 	.word	0x40022000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fbf5 	bl	80025ca <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df8:	f001 fbbd 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_IncTick+0x1c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_IncTick+0x20>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <HAL_IncTick+0x20>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000218 	.word	0x20000218

08000e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <HAL_GetTick+0x10>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000218 	.word	0x20000218

08000e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0be      	b.n	8000ff4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d109      	bne.n	8000e98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff f9aa 	bl	80001ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 faff 	bl	800149c <ADC_ConversionStop_Disable>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 8099 	bne.w	8000fe2 <HAL_ADC_Init+0x18e>
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 8095 	bne.w	8000fe2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec0:	f023 0302 	bic.w	r3, r3, #2
 8000ec4:	f043 0202 	orr.w	r2, r3, #2
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7b1b      	ldrb	r3, [r3, #12]
 8000eda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000edc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eec:	d003      	beq.n	8000ef6 <HAL_ADC_Init+0xa2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d102      	bne.n	8000efc <HAL_ADC_Init+0xa8>
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	e000      	b.n	8000efe <HAL_ADC_Init+0xaa>
 8000efc:	2300      	movs	r3, #0
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7d1b      	ldrb	r3, [r3, #20]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d119      	bne.n	8000f40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7b1b      	ldrb	r3, [r3, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d109      	bne.n	8000f28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	035a      	lsls	r2, r3, #13
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e00b      	b.n	8000f40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f043 0220 	orr.w	r2, r3, #32
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	f043 0201 	orr.w	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_ADC_Init+0x1a8>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f70:	d003      	beq.n	8000f7a <HAL_ADC_Init+0x126>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d104      	bne.n	8000f84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	051b      	lsls	r3, r3, #20
 8000f82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_ADC_Init+0x1ac>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f023 0303 	bic.w	r3, r3, #3
 8000fb6:	f043 0201 	orr.w	r2, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fbe:	e018      	b.n	8000ff2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	f023 0312 	bic.w	r3, r3, #18
 8000fc8:	f043 0210 	orr.w	r2, r3, #16
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	f043 0201 	orr.w	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe0:	e007      	b.n	8000ff2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	f043 0210 	orr.w	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	ffe1f7fd 	.word	0xffe1f7fd
 8001000:	ff1f0efe 	.word	0xff1f0efe

08001004 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a64      	ldr	r2, [pc, #400]	; (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d004      	beq.n	8001028 <HAL_ADC_Start_DMA+0x24>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a63      	ldr	r2, [pc, #396]	; (80011b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d106      	bne.n	8001036 <HAL_ADC_Start_DMA+0x32>
 8001028:	4b60      	ldr	r3, [pc, #384]	; (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001030:	2b00      	cmp	r3, #0
 8001032:	f040 80b3 	bne.w	800119c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <HAL_ADC_Start_DMA+0x40>
 8001040:	2302      	movs	r3, #2
 8001042:	e0ae      	b.n	80011a2 <HAL_ADC_Start_DMA+0x19e>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2201      	movs	r2, #1
 8001048:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f000 f9cb 	bl	80013e8 <ADC_Enable>
 8001052:	4603      	mov	r3, r0
 8001054:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001056:	7dfb      	ldrb	r3, [r7, #23]
 8001058:	2b00      	cmp	r3, #0
 800105a:	f040 809a 	bne.w	8001192 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001066:	f023 0301 	bic.w	r3, r3, #1
 800106a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a4e      	ldr	r2, [pc, #312]	; (80011b0 <HAL_ADC_Start_DMA+0x1ac>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d105      	bne.n	8001088 <HAL_ADC_Start_DMA+0x84>
 800107c:	4b4b      	ldr	r3, [pc, #300]	; (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d115      	bne.n	80010b4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d026      	beq.n	80010f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010b2:	e01d      	b.n	80010f0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a39      	ldr	r2, [pc, #228]	; (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d004      	beq.n	80010d4 <HAL_ADC_Start_DMA+0xd0>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a38      	ldr	r2, [pc, #224]	; (80011b0 <HAL_ADC_Start_DMA+0x1ac>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d10d      	bne.n	80010f0 <HAL_ADC_Start_DMA+0xec>
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HAL_ADC_Start_DMA+0x1a8>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d007      	beq.n	80010f0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	f023 0206 	bic.w	r2, r3, #6
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
 8001108:	e002      	b.n	8001110 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a25      	ldr	r2, [pc, #148]	; (80011b4 <HAL_ADC_Start_DMA+0x1b0>)
 800111e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a24      	ldr	r2, [pc, #144]	; (80011b8 <HAL_ADC_Start_DMA+0x1b4>)
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a23      	ldr	r2, [pc, #140]	; (80011bc <HAL_ADC_Start_DMA+0x1b8>)
 800112e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f06f 0202 	mvn.w	r2, #2
 8001138:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001148:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a18      	ldr	r0, [r3, #32]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	334c      	adds	r3, #76	; 0x4c
 8001154:	4619      	mov	r1, r3
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f001 fa9d 	bl	8002698 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001168:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800116c:	d108      	bne.n	8001180 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800117c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800117e:	e00f      	b.n	80011a0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800118e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001190:	e006      	b.n	80011a0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800119a:	e001      	b.n	80011a0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012400 	.word	0x40012400
 80011b0:	40012800 	.word	0x40012800
 80011b4:	0800151f 	.word	0x0800151f
 80011b8:	0800159b 	.word	0x0800159b
 80011bc:	080015b7 	.word	0x080015b7

080011c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
	...

080011f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x20>
 8001214:	2302      	movs	r3, #2
 8001216:	e0dc      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x1da>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b06      	cmp	r3, #6
 8001226:	d81c      	bhi.n	8001262 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b05      	subs	r3, #5
 800123a:	221f      	movs	r2, #31
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	4019      	ands	r1, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b05      	subs	r3, #5
 8001254:	fa00 f203 	lsl.w	r2, r0, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	635a      	str	r2, [r3, #52]	; 0x34
 8001260:	e03c      	b.n	80012dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	d81c      	bhi.n	80012a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	3b23      	subs	r3, #35	; 0x23
 800127c:	221f      	movs	r2, #31
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	4019      	ands	r1, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b23      	subs	r3, #35	; 0x23
 8001296:	fa00 f203 	lsl.w	r2, r0, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	631a      	str	r2, [r3, #48]	; 0x30
 80012a2:	e01b      	b.n	80012dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3b41      	subs	r3, #65	; 0x41
 80012b6:	221f      	movs	r2, #31
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	4019      	ands	r1, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b41      	subs	r3, #65	; 0x41
 80012d0:	fa00 f203 	lsl.w	r2, r0, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b09      	cmp	r3, #9
 80012e2:	d91c      	bls.n	800131e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68d9      	ldr	r1, [r3, #12]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	3b1e      	subs	r3, #30
 80012f6:	2207      	movs	r2, #7
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4019      	ands	r1, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6898      	ldr	r0, [r3, #8]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	3b1e      	subs	r3, #30
 8001310:	fa00 f203 	lsl.w	r2, r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	60da      	str	r2, [r3, #12]
 800131c:	e019      	b.n	8001352 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6919      	ldr	r1, [r3, #16]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	2207      	movs	r2, #7
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	4019      	ands	r1, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	6898      	ldr	r0, [r3, #8]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4613      	mov	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4413      	add	r3, r2
 8001346:	fa00 f203 	lsl.w	r2, r0, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b10      	cmp	r3, #16
 8001358:	d003      	beq.n	8001362 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800135e:	2b11      	cmp	r3, #17
 8001360:	d132      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_ADC_ConfigChannel+0x1e4>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d125      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d126      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001388:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d11a      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001398:	fba2 2303 	umull	r2, r3, r2, r3
 800139c:	0c9a      	lsrs	r2, r3, #18
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013a8:	e002      	b.n	80013b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f9      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x1b2>
 80013b6:	e007      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	f043 0220 	orr.w	r2, r3, #32
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40012400 	.word	0x40012400
 80013e0:	20000000 	.word	0x20000000
 80013e4:	431bde83 	.word	0x431bde83

080013e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b01      	cmp	r3, #1
 8001404:	d040      	beq.n	8001488 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0201 	orr.w	r2, r2, #1
 8001414:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <ADC_Enable+0xac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <ADC_Enable+0xb0>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9b      	lsrs	r3, r3, #18
 8001422:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001424:	e002      	b.n	800142c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3b01      	subs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001432:	f7ff fd05 	bl	8000e40 <HAL_GetTick>
 8001436:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001438:	e01f      	b.n	800147a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800143a:	f7ff fd01 	bl	8000e40 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d918      	bls.n	800147a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b01      	cmp	r3, #1
 8001454:	d011      	beq.n	800147a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	f043 0210 	orr.w	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e007      	b.n	800148a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b01      	cmp	r3, #1
 8001486:	d1d8      	bne.n	800143a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000000 	.word	0x20000000
 8001498:	431bde83 	.word	0x431bde83

0800149c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d12e      	bne.n	8001514 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014c6:	f7ff fcbb 	bl	8000e40 <HAL_GetTick>
 80014ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014cc:	e01b      	b.n	8001506 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014ce:	f7ff fcb7 	bl	8000e40 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d914      	bls.n	8001506 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10d      	bne.n	8001506 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	f043 0210 	orr.w	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	f043 0201 	orr.w	r2, r3, #1
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e007      	b.n	8001516 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d0dc      	beq.n	80014ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b084      	sub	sp, #16
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001534:	2b00      	cmp	r3, #0
 8001536:	d127      	bne.n	8001588 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800154e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001552:	d115      	bne.n	8001580 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001558:	2b00      	cmp	r3, #0
 800155a:	d111      	bne.n	8001580 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff fe1d 	bl	80011c0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001586:	e004      	b.n	8001592 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff fe12 	bl	80011d2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	f043 0204 	orr.w	r2, r3, #4
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f7ff fe01 	bl	80011e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_ADCEx_Calibration_Start+0x1e>
 8001606:	2302      	movs	r3, #2
 8001608:	e097      	b.n	800173a <HAL_ADCEx_Calibration_Start+0x14e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ff42 	bl	800149c <ADC_ConversionStop_Disable>
 8001618:	4603      	mov	r3, r0
 800161a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fee3 	bl	80013e8 <ADC_Enable>
 8001622:	4603      	mov	r3, r0
 8001624:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	2b00      	cmp	r3, #0
 800162a:	f040 8081 	bne.w	8001730 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001636:	f023 0302 	bic.w	r3, r3, #2
 800163a:	f043 0202 	orr.w	r2, r3, #2
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001642:	4b40      	ldr	r3, [pc, #256]	; (8001744 <HAL_ADCEx_Calibration_Start+0x158>)
 8001644:	681c      	ldr	r4, [r3, #0]
 8001646:	2002      	movs	r0, #2
 8001648:	f002 f850 	bl	80036ec <HAL_RCCEx_GetPeriphCLKFreq>
 800164c:	4603      	mov	r3, r0
 800164e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001652:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001654:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001656:	e002      	b.n	800165e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3b01      	subs	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f9      	bne.n	8001658 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0208 	orr.w	r2, r2, #8
 8001672:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001674:	f7ff fbe4 	bl	8000e40 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800167a:	e01b      	b.n	80016b4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800167c:	f7ff fbe0 	bl	8000e40 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b0a      	cmp	r3, #10
 8001688:	d914      	bls.n	80016b4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0308 	and.w	r3, r3, #8
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00d      	beq.n	80016b4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f023 0312 	bic.w	r3, r3, #18
 80016a0:	f043 0210 	orr.w	r2, r3, #16
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e042      	b.n	800173a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1dc      	bne.n	800167c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0204 	orr.w	r2, r2, #4
 80016d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80016d2:	f7ff fbb5 	bl	8000e40 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016d8:	e01b      	b.n	8001712 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016da:	f7ff fbb1 	bl	8000e40 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b0a      	cmp	r3, #10
 80016e6:	d914      	bls.n	8001712 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00d      	beq.n	8001712 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	f023 0312 	bic.w	r3, r3, #18
 80016fe:	f043 0210 	orr.w	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e013      	b.n	800173a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1dc      	bne.n	80016da <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	f023 0303 	bic.w	r3, r3, #3
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001738:	7dfb      	ldrb	r3, [r7, #23]
}
 800173a:	4618      	mov	r0, r3
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000

08001748 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0ed      	b.n	8001936 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe fdfe 	bl	8000368 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800177c:	f7ff fb60 	bl	8000e40 <HAL_GetTick>
 8001780:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001782:	e012      	b.n	80017aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001784:	f7ff fb5c 	bl	8000e40 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b0a      	cmp	r3, #10
 8001790:	d90b      	bls.n	80017aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2205      	movs	r2, #5
 80017a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0c5      	b.n	8001936 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0e5      	beq.n	8001784 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0202 	bic.w	r2, r2, #2
 80017c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c8:	f7ff fb3a 	bl	8000e40 <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ce:	e012      	b.n	80017f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017d0:	f7ff fb36 	bl	8000e40 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b0a      	cmp	r3, #10
 80017dc:	d90b      	bls.n	80017f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2205      	movs	r2, #5
 80017ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e09f      	b.n	8001936 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e5      	bne.n	80017d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7e1b      	ldrb	r3, [r3, #24]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d108      	bne.n	800181e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e007      	b.n	800182e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800182c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	7e5b      	ldrb	r3, [r3, #25]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d108      	bne.n	8001848 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e007      	b.n	8001858 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001856:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7e9b      	ldrb	r3, [r3, #26]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d108      	bne.n	8001872 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0220 	orr.w	r2, r2, #32
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	e007      	b.n	8001882 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0220 	bic.w	r2, r2, #32
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7edb      	ldrb	r3, [r3, #27]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d108      	bne.n	800189c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0210 	bic.w	r2, r2, #16
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e007      	b.n	80018ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7f1b      	ldrb	r3, [r3, #28]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0208 	orr.w	r2, r2, #8
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0208 	bic.w	r2, r2, #8
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7f5b      	ldrb	r3, [r3, #29]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0204 	orr.w	r2, r2, #4
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e007      	b.n	8001900 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0204 	bic.w	r2, r2, #4
 80018fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	ea42 0103 	orr.w	r1, r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800193e:	b480      	push	{r7}
 8001940:	b087      	sub	sp, #28
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001954:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001956:	7cfb      	ldrb	r3, [r7, #19]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d003      	beq.n	8001964 <HAL_CAN_ConfigFilter+0x26>
 800195c:	7cfb      	ldrb	r3, [r7, #19]
 800195e:	2b02      	cmp	r3, #2
 8001960:	f040 80aa 	bne.w	8001ab8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f003 031f 	and.w	r3, r3, #31
 800197c:	2201      	movs	r2, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43db      	mvns	r3, r3
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d123      	bne.n	80019e6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3248      	adds	r2, #72	; 0x48
 80019c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019dc:	6979      	ldr	r1, [r7, #20]
 80019de:	3348      	adds	r3, #72	; 0x48
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d122      	bne.n	8001a34 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3248      	adds	r2, #72	; 0x48
 8001a14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a2a:	6979      	ldr	r1, [r7, #20]
 8001a2c:	3348      	adds	r3, #72	; 0x48
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001a4e:	e007      	b.n	8001a60 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001a7a:	e007      	b.n	8001a8c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aaa:	f023 0201 	bic.w	r2, r3, #1
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e006      	b.n	8001ac6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
  }
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d12e      	bne.n	8001b42 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001afc:	f7ff f9a0 	bl	8000e40 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b02:	e012      	b.n	8001b2a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b04:	f7ff f99c 	bl	8000e40 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	d90b      	bls.n	8001b2a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2205      	movs	r2, #5
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e012      	b.n	8001b50 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e5      	bne.n	8001b04 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e006      	b.n	8001b50 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
  }
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b76:	7ffb      	ldrb	r3, [r7, #31]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d003      	beq.n	8001b84 <HAL_CAN_AddTxMessage+0x2c>
 8001b7c:	7ffb      	ldrb	r3, [r7, #31]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	f040 80ad 	bne.w	8001cde <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10a      	bne.n	8001ba4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8095 	beq.w	8001cce <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	0e1b      	lsrs	r3, r3, #24
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bae:	2201      	movs	r2, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10d      	bne.n	8001bdc <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bca:	68f9      	ldr	r1, [r7, #12]
 8001bcc:	6809      	ldr	r1, [r1, #0]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3318      	adds	r3, #24
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	440b      	add	r3, r1
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	e00f      	b.n	8001bfc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001be6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bf0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	440b      	add	r3, r1
 8001bfa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6819      	ldr	r1, [r3, #0]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3318      	adds	r3, #24
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	7d1b      	ldrb	r3, [r3, #20]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d111      	bne.n	8001c3c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3318      	adds	r3, #24
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	3304      	adds	r3, #4
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	6811      	ldr	r1, [r2, #0]
 8001c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3318      	adds	r3, #24
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	440b      	add	r3, r1
 8001c38:	3304      	adds	r3, #4
 8001c3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3307      	adds	r3, #7
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	061a      	lsls	r2, r3, #24
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3306      	adds	r3, #6
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3305      	adds	r3, #5
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	4313      	orrs	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	3204      	adds	r2, #4
 8001c5c:	7812      	ldrb	r2, [r2, #0]
 8001c5e:	4610      	mov	r0, r2
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	6811      	ldr	r1, [r2, #0]
 8001c64:	ea43 0200 	orr.w	r2, r3, r0
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c72:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3303      	adds	r3, #3
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	061a      	lsls	r2, r3, #24
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3302      	adds	r3, #2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	041b      	lsls	r3, r3, #16
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	7812      	ldrb	r2, [r2, #0]
 8001c94:	4610      	mov	r0, r2
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	6811      	ldr	r1, [r2, #0]
 8001c9a:	ea43 0200 	orr.w	r2, r3, r0
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ca8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3318      	adds	r3, #24
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4413      	add	r3, r2
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	6811      	ldr	r1, [r2, #0]
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3318      	adds	r3, #24
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	440b      	add	r3, r1
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e00e      	b.n	8001cec <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e006      	b.n	8001cec <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3724      	adds	r7, #36	; 0x24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b087      	sub	sp, #28
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d0c:	7dfb      	ldrb	r3, [r7, #23]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d003      	beq.n	8001d1a <HAL_CAN_GetRxMessage+0x24>
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	f040 8103 	bne.w	8001f20 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10e      	bne.n	8001d3e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0f7      	b.n	8001f2e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d107      	bne.n	8001d5c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0e8      	b.n	8001f2e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	331b      	adds	r3, #27
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	4413      	add	r3, r2
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0204 	and.w	r2, r3, #4
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10c      	bne.n	8001d94 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	331b      	adds	r3, #27
 8001d82:	011b      	lsls	r3, r3, #4
 8001d84:	4413      	add	r3, r2
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0d5b      	lsrs	r3, r3, #21
 8001d8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	e00b      	b.n	8001dac <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	331b      	adds	r3, #27
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4413      	add	r3, r2
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	331b      	adds	r3, #27
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	4413      	add	r3, r2
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0202 	and.w	r2, r3, #2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	331b      	adds	r3, #27
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2208      	movs	r2, #8
 8001dde:	611a      	str	r2, [r3, #16]
 8001de0:	e00b      	b.n	8001dfa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	331b      	adds	r3, #27
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4413      	add	r3, r2
 8001dee:	3304      	adds	r3, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 020f 	and.w	r2, r3, #15
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	331b      	adds	r3, #27
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	3304      	adds	r3, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	331b      	adds	r3, #27
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0a1a      	lsrs	r2, r3, #8
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	3301      	adds	r3, #1
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	0c1a      	lsrs	r2, r3, #16
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	3302      	adds	r3, #2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	011b      	lsls	r3, r3, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e1a      	lsrs	r2, r3, #24
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	3303      	adds	r3, #3
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0a1a      	lsrs	r2, r3, #8
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	3305      	adds	r3, #5
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	0c1a      	lsrs	r2, r3, #16
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	3306      	adds	r3, #6
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	0e1a      	lsrs	r2, r3, #24
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3307      	adds	r3, #7
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0220 	orr.w	r2, r2, #32
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	e007      	b.n	8001f1c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0220 	orr.w	r2, r2, #32
 8001f1a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e006      	b.n	8001f2e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
  }
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f48:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d002      	beq.n	8001f56 <HAL_CAN_ActivateNotification+0x1e>
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d109      	bne.n	8001f6a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6959      	ldr	r1, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e006      	b.n	8001f78 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
  }
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b08a      	sub	sp, #40	; 0x28
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d07c      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d023      	beq.n	800201a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f983 	bl	80022f0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001fea:	e016      	b.n	800201a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffe:	e00c      	b.n	800201a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d004      	beq.n	8002014 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e002      	b.n	800201a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f986 	bl	8002326 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d024      	beq.n	800206e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800202c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f962 	bl	8002302 <HAL_CAN_TxMailbox1CompleteCallback>
 800203e:	e016      	b.n	800206e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d004      	beq.n	8002054 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
 8002052:	e00c      	b.n	800206e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800205a:	2b00      	cmp	r3, #0
 800205c:	d004      	beq.n	8002068 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
 8002066:	e002      	b.n	800206e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f965 	bl	8002338 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d024      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002080:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f941 	bl	8002314 <HAL_CAN_TxMailbox2CompleteCallback>
 8002092:	e016      	b.n	80020c2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
 80020a6:	e00c      	b.n	80020c2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d004      	beq.n	80020bc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ba:	e002      	b.n	80020c2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f944 	bl	800234a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00c      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0310 	and.w	r3, r3, #16
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2210      	movs	r2, #16
 80020e4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2208      	movs	r2, #8
 8002100:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f933 	bl	800236e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f91b 	bl	800235c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00c      	beq.n	800214a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002140:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2210      	movs	r2, #16
 8002148:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00b      	beq.n	800216c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2208      	movs	r2, #8
 8002164:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f90a 	bl	8002380 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7fe f9ef 	bl	8000568 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00b      	beq.n	80021ac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2210      	movs	r2, #16
 80021a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8f3 	bl	8002392 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00b      	beq.n	80021ce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2208      	movs	r2, #8
 80021c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f8eb 	bl	80023a4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d07b      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d072      	beq.n	80022c8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223c:	2b00      	cmp	r3, #0
 800223e:	d043      	beq.n	80022c8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002246:	2b00      	cmp	r3, #0
 8002248:	d03e      	beq.n	80022c8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002250:	2b60      	cmp	r3, #96	; 0x60
 8002252:	d02b      	beq.n	80022ac <HAL_CAN_IRQHandler+0x32a>
 8002254:	2b60      	cmp	r3, #96	; 0x60
 8002256:	d82e      	bhi.n	80022b6 <HAL_CAN_IRQHandler+0x334>
 8002258:	2b50      	cmp	r3, #80	; 0x50
 800225a:	d022      	beq.n	80022a2 <HAL_CAN_IRQHandler+0x320>
 800225c:	2b50      	cmp	r3, #80	; 0x50
 800225e:	d82a      	bhi.n	80022b6 <HAL_CAN_IRQHandler+0x334>
 8002260:	2b40      	cmp	r3, #64	; 0x40
 8002262:	d019      	beq.n	8002298 <HAL_CAN_IRQHandler+0x316>
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	d826      	bhi.n	80022b6 <HAL_CAN_IRQHandler+0x334>
 8002268:	2b30      	cmp	r3, #48	; 0x30
 800226a:	d010      	beq.n	800228e <HAL_CAN_IRQHandler+0x30c>
 800226c:	2b30      	cmp	r3, #48	; 0x30
 800226e:	d822      	bhi.n	80022b6 <HAL_CAN_IRQHandler+0x334>
 8002270:	2b10      	cmp	r3, #16
 8002272:	d002      	beq.n	800227a <HAL_CAN_IRQHandler+0x2f8>
 8002274:	2b20      	cmp	r3, #32
 8002276:	d005      	beq.n	8002284 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002278:	e01d      	b.n	80022b6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002282:	e019      	b.n	80022b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	f043 0310 	orr.w	r3, r3, #16
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800228c:	e014      	b.n	80022b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	f043 0320 	orr.w	r3, r3, #32
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002296:	e00f      	b.n	80022b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022a0:	e00a      	b.n	80022b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022aa:	e005      	b.n	80022b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022b4:	e000      	b.n	80022b8 <HAL_CAN_IRQHandler+0x336>
            break;
 80022b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2204      	movs	r2, #4
 80022ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f867 	bl	80023b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	; 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fa:	4a04      	ldr	r2, [pc, #16]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60d3      	str	r3, [r2, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0b      	blt.n	8002456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4906      	ldr	r1, [pc, #24]	; (8002460 <__NVIC_EnableIRQ+0x34>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002540:	f7ff ff90 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff2d 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002588:	f7ff ff42 	bl	8002410 <__NVIC_GetPriorityGrouping>
 800258c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7ff ff90 	bl	80024b8 <NVIC_EncodePriority>
 8002598:	4602      	mov	r2, r0
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff5f 	bl	8002464 <__NVIC_SetPriority>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	4603      	mov	r3, r0
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff35 	bl	800242c <__NVIC_EnableIRQ>
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff ffa2 	bl	800251c <SysTick_Config>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e043      	b.n	8002682 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	4b22      	ldr	r3, [pc, #136]	; (800268c <HAL_DMA_Init+0xa8>)
 8002602:	4413      	add	r3, r2
 8002604:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_DMA_Init+0xac>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1f      	ldr	r2, [pc, #124]	; (8002694 <HAL_DMA_Init+0xb0>)
 8002616:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800262e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002632:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800263c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002648:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002654:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	bffdfff8 	.word	0xbffdfff8
 8002690:	cccccccd 	.word	0xcccccccd
 8002694:	40020000 	.word	0x40020000

08002698 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_DMA_Start_IT+0x20>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e04b      	b.n	8002750 <HAL_DMA_Start_IT+0xb8>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d13a      	bne.n	8002742 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f937 	bl	8002964 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 020e 	orr.w	r2, r2, #14
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e00f      	b.n	8002730 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 020a 	orr.w	r2, r2, #10
 800272e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e005      	b.n	800274e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800274e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	2204      	movs	r2, #4
 8002776:	409a      	lsls	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d04f      	beq.n	8002820 <HAL_DMA_IRQHandler+0xc8>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d04a      	beq.n	8002820 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0204 	bic.w	r2, r2, #4
 80027a6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a66      	ldr	r2, [pc, #408]	; (8002948 <HAL_DMA_IRQHandler+0x1f0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d029      	beq.n	8002806 <HAL_DMA_IRQHandler+0xae>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a65      	ldr	r2, [pc, #404]	; (800294c <HAL_DMA_IRQHandler+0x1f4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_IRQHandler+0xaa>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a63      	ldr	r2, [pc, #396]	; (8002950 <HAL_DMA_IRQHandler+0x1f8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01a      	beq.n	80027fc <HAL_DMA_IRQHandler+0xa4>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a62      	ldr	r2, [pc, #392]	; (8002954 <HAL_DMA_IRQHandler+0x1fc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d012      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x9e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a60      	ldr	r2, [pc, #384]	; (8002958 <HAL_DMA_IRQHandler+0x200>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00a      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x98>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5f      	ldr	r2, [pc, #380]	; (800295c <HAL_DMA_IRQHandler+0x204>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <HAL_DMA_IRQHandler+0x92>
 80027e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027e8:	e00e      	b.n	8002808 <HAL_DMA_IRQHandler+0xb0>
 80027ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027ee:	e00b      	b.n	8002808 <HAL_DMA_IRQHandler+0xb0>
 80027f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027f4:	e008      	b.n	8002808 <HAL_DMA_IRQHandler+0xb0>
 80027f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027fa:	e005      	b.n	8002808 <HAL_DMA_IRQHandler+0xb0>
 80027fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002800:	e002      	b.n	8002808 <HAL_DMA_IRQHandler+0xb0>
 8002802:	2340      	movs	r3, #64	; 0x40
 8002804:	e000      	b.n	8002808 <HAL_DMA_IRQHandler+0xb0>
 8002806:	2304      	movs	r3, #4
 8002808:	4a55      	ldr	r2, [pc, #340]	; (8002960 <HAL_DMA_IRQHandler+0x208>)
 800280a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8094 	beq.w	800293e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800281e:	e08e      	b.n	800293e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	2202      	movs	r2, #2
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d056      	beq.n	80028de <HAL_DMA_IRQHandler+0x186>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d051      	beq.n	80028de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10b      	bne.n	8002860 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 020a 	bic.w	r2, r2, #10
 8002856:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a38      	ldr	r2, [pc, #224]	; (8002948 <HAL_DMA_IRQHandler+0x1f0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d029      	beq.n	80028be <HAL_DMA_IRQHandler+0x166>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a37      	ldr	r2, [pc, #220]	; (800294c <HAL_DMA_IRQHandler+0x1f4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_DMA_IRQHandler+0x162>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a35      	ldr	r2, [pc, #212]	; (8002950 <HAL_DMA_IRQHandler+0x1f8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01a      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x15c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_DMA_IRQHandler+0x1fc>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d012      	beq.n	80028ae <HAL_DMA_IRQHandler+0x156>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a32      	ldr	r2, [pc, #200]	; (8002958 <HAL_DMA_IRQHandler+0x200>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00a      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x150>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a31      	ldr	r2, [pc, #196]	; (800295c <HAL_DMA_IRQHandler+0x204>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d102      	bne.n	80028a2 <HAL_DMA_IRQHandler+0x14a>
 800289c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028a0:	e00e      	b.n	80028c0 <HAL_DMA_IRQHandler+0x168>
 80028a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a6:	e00b      	b.n	80028c0 <HAL_DMA_IRQHandler+0x168>
 80028a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ac:	e008      	b.n	80028c0 <HAL_DMA_IRQHandler+0x168>
 80028ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028b2:	e005      	b.n	80028c0 <HAL_DMA_IRQHandler+0x168>
 80028b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b8:	e002      	b.n	80028c0 <HAL_DMA_IRQHandler+0x168>
 80028ba:	2320      	movs	r3, #32
 80028bc:	e000      	b.n	80028c0 <HAL_DMA_IRQHandler+0x168>
 80028be:	2302      	movs	r3, #2
 80028c0:	4a27      	ldr	r2, [pc, #156]	; (8002960 <HAL_DMA_IRQHandler+0x208>)
 80028c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d034      	beq.n	800293e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028dc:	e02f      	b.n	800293e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2208      	movs	r2, #8
 80028e4:	409a      	lsls	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d028      	beq.n	8002940 <HAL_DMA_IRQHandler+0x1e8>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d023      	beq.n	8002940 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 020e 	bic.w	r2, r2, #14
 8002906:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f202 	lsl.w	r2, r1, r2
 8002916:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
    }
  }
  return;
 800293e:	bf00      	nop
 8002940:	bf00      	nop
}
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40020008 	.word	0x40020008
 800294c:	4002001c 	.word	0x4002001c
 8002950:	40020030 	.word	0x40020030
 8002954:	40020044 	.word	0x40020044
 8002958:	40020058 	.word	0x40020058
 800295c:	4002006c 	.word	0x4002006c
 8002960:	40020000 	.word	0x40020000

08002964 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b10      	cmp	r3, #16
 8002990:	d108      	bne.n	80029a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029a2:	e007      	b.n	80029b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	60da      	str	r2, [r3, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b08b      	sub	sp, #44	; 0x2c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d2:	e169      	b.n	8002ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029d4:	2201      	movs	r2, #1
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 8158 	bne.w	8002ca2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a9a      	ldr	r2, [pc, #616]	; (8002c60 <HAL_GPIO_Init+0x2a0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d05e      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 80029fc:	4a98      	ldr	r2, [pc, #608]	; (8002c60 <HAL_GPIO_Init+0x2a0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d875      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a02:	4a98      	ldr	r2, [pc, #608]	; (8002c64 <HAL_GPIO_Init+0x2a4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d058      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 8002a08:	4a96      	ldr	r2, [pc, #600]	; (8002c64 <HAL_GPIO_Init+0x2a4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d86f      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a0e:	4a96      	ldr	r2, [pc, #600]	; (8002c68 <HAL_GPIO_Init+0x2a8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d052      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 8002a14:	4a94      	ldr	r2, [pc, #592]	; (8002c68 <HAL_GPIO_Init+0x2a8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d869      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a1a:	4a94      	ldr	r2, [pc, #592]	; (8002c6c <HAL_GPIO_Init+0x2ac>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d04c      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 8002a20:	4a92      	ldr	r2, [pc, #584]	; (8002c6c <HAL_GPIO_Init+0x2ac>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d863      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a26:	4a92      	ldr	r2, [pc, #584]	; (8002c70 <HAL_GPIO_Init+0x2b0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d046      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
 8002a2c:	4a90      	ldr	r2, [pc, #576]	; (8002c70 <HAL_GPIO_Init+0x2b0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d85d      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a32:	2b12      	cmp	r3, #18
 8002a34:	d82a      	bhi.n	8002a8c <HAL_GPIO_Init+0xcc>
 8002a36:	2b12      	cmp	r3, #18
 8002a38:	d859      	bhi.n	8002aee <HAL_GPIO_Init+0x12e>
 8002a3a:	a201      	add	r2, pc, #4	; (adr r2, 8002a40 <HAL_GPIO_Init+0x80>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002abb 	.word	0x08002abb
 8002a44:	08002a95 	.word	0x08002a95
 8002a48:	08002aa7 	.word	0x08002aa7
 8002a4c:	08002ae9 	.word	0x08002ae9
 8002a50:	08002aef 	.word	0x08002aef
 8002a54:	08002aef 	.word	0x08002aef
 8002a58:	08002aef 	.word	0x08002aef
 8002a5c:	08002aef 	.word	0x08002aef
 8002a60:	08002aef 	.word	0x08002aef
 8002a64:	08002aef 	.word	0x08002aef
 8002a68:	08002aef 	.word	0x08002aef
 8002a6c:	08002aef 	.word	0x08002aef
 8002a70:	08002aef 	.word	0x08002aef
 8002a74:	08002aef 	.word	0x08002aef
 8002a78:	08002aef 	.word	0x08002aef
 8002a7c:	08002aef 	.word	0x08002aef
 8002a80:	08002aef 	.word	0x08002aef
 8002a84:	08002a9d 	.word	0x08002a9d
 8002a88:	08002ab1 	.word	0x08002ab1
 8002a8c:	4a79      	ldr	r2, [pc, #484]	; (8002c74 <HAL_GPIO_Init+0x2b4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a92:	e02c      	b.n	8002aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	623b      	str	r3, [r7, #32]
          break;
 8002a9a:	e029      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	623b      	str	r3, [r7, #32]
          break;
 8002aa4:	e024      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	3308      	adds	r3, #8
 8002aac:	623b      	str	r3, [r7, #32]
          break;
 8002aae:	e01f      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	623b      	str	r3, [r7, #32]
          break;
 8002ab8:	e01a      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	623b      	str	r3, [r7, #32]
          break;
 8002ac6:	e013      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d105      	bne.n	8002adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	611a      	str	r2, [r3, #16]
          break;
 8002ada:	e009      	b.n	8002af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002adc:	2308      	movs	r3, #8
 8002ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	615a      	str	r2, [r3, #20]
          break;
 8002ae6:	e003      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]
          break;
 8002aec:	e000      	b.n	8002af0 <HAL_GPIO_Init+0x130>
          break;
 8002aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2bff      	cmp	r3, #255	; 0xff
 8002af4:	d801      	bhi.n	8002afa <HAL_GPIO_Init+0x13a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	e001      	b.n	8002afe <HAL_GPIO_Init+0x13e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2bff      	cmp	r3, #255	; 0xff
 8002b04:	d802      	bhi.n	8002b0c <HAL_GPIO_Init+0x14c>
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	e002      	b.n	8002b12 <HAL_GPIO_Init+0x152>
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	3b08      	subs	r3, #8
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	210f      	movs	r1, #15
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	401a      	ands	r2, r3
 8002b24:	6a39      	ldr	r1, [r7, #32]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 80b1 	beq.w	8002ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b40:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4a4c      	ldr	r2, [pc, #304]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6193      	str	r3, [r2, #24]
 8002b4c:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_GPIO_Init+0x2b8>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b58:	4a48      	ldr	r2, [pc, #288]	; (8002c7c <HAL_GPIO_Init+0x2bc>)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a40      	ldr	r2, [pc, #256]	; (8002c80 <HAL_GPIO_Init+0x2c0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d013      	beq.n	8002bac <HAL_GPIO_Init+0x1ec>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3f      	ldr	r2, [pc, #252]	; (8002c84 <HAL_GPIO_Init+0x2c4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_GPIO_Init+0x1e8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a3e      	ldr	r2, [pc, #248]	; (8002c88 <HAL_GPIO_Init+0x2c8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d007      	beq.n	8002ba4 <HAL_GPIO_Init+0x1e4>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3d      	ldr	r2, [pc, #244]	; (8002c8c <HAL_GPIO_Init+0x2cc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_GPIO_Init+0x1e0>
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e006      	b.n	8002bae <HAL_GPIO_Init+0x1ee>
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	e004      	b.n	8002bae <HAL_GPIO_Init+0x1ee>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e002      	b.n	8002bae <HAL_GPIO_Init+0x1ee>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_GPIO_Init+0x1ee>
 8002bac:	2300      	movs	r3, #0
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	f002 0203 	and.w	r2, r2, #3
 8002bb4:	0092      	lsls	r2, r2, #2
 8002bb6:	4093      	lsls	r3, r2
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bbe:	492f      	ldr	r1, [pc, #188]	; (8002c7c <HAL_GPIO_Init+0x2bc>)
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d006      	beq.n	8002be6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	492c      	ldr	r1, [pc, #176]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002be6:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	43db      	mvns	r3, r3
 8002bee:	4928      	ldr	r1, [pc, #160]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	4922      	ldr	r1, [pc, #136]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
 8002c0c:	e006      	b.n	8002c1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	491e      	ldr	r1, [pc, #120]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	4918      	ldr	r1, [pc, #96]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
 8002c34:	e006      	b.n	8002c44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	4914      	ldr	r1, [pc, #80]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d021      	beq.n	8002c94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	490e      	ldr	r1, [pc, #56]	; (8002c90 <HAL_GPIO_Init+0x2d0>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
 8002c5c:	e021      	b.n	8002ca2 <HAL_GPIO_Init+0x2e2>
 8002c5e:	bf00      	nop
 8002c60:	10320000 	.word	0x10320000
 8002c64:	10310000 	.word	0x10310000
 8002c68:	10220000 	.word	0x10220000
 8002c6c:	10210000 	.word	0x10210000
 8002c70:	10120000 	.word	0x10120000
 8002c74:	10110000 	.word	0x10110000
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40010800 	.word	0x40010800
 8002c84:	40010c00 	.word	0x40010c00
 8002c88:	40011000 	.word	0x40011000
 8002c8c:	40011400 	.word	0x40011400
 8002c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_GPIO_Init+0x304>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	4909      	ldr	r1, [pc, #36]	; (8002cc4 <HAL_GPIO_Init+0x304>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f47f ae8e 	bne.w	80029d4 <HAL_GPIO_Init+0x14>
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	372c      	adds	r7, #44	; 0x2c
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40010400 	.word	0x40010400

08002cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e001      	b.n	8002cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]
 8002d02:	4613      	mov	r3, r2
 8002d04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d06:	787b      	ldrb	r3, [r7, #1]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0c:	887a      	ldrh	r2, [r7, #2]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d12:	e003      	b.n	8002d1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	041a      	lsls	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	611a      	str	r2, [r3, #16]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d38:	887a      	ldrh	r2, [r7, #2]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	041a      	lsls	r2, r3, #16
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	887b      	ldrh	r3, [r7, #2]
 8002d46:	400b      	ands	r3, r1
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	611a      	str	r2, [r3, #16]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d6e:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fd76 	bl	8000868 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40010400 	.word	0x40010400

08002d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e272      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8087 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da8:	4b92      	ldr	r3, [pc, #584]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d00c      	beq.n	8002dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002db4:	4b8f      	ldr	r3, [pc, #572]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d112      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5e>
 8002dc0:	4b8c      	ldr	r3, [pc, #560]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dce:	4b89      	ldr	r3, [pc, #548]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d06c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x12c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d168      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e24c      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x76>
 8002df0:	4b80      	ldr	r3, [pc, #512]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a7f      	ldr	r2, [pc, #508]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	e02e      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x98>
 8002e06:	4b7b      	ldr	r3, [pc, #492]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7a      	ldr	r2, [pc, #488]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b78      	ldr	r3, [pc, #480]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a77      	ldr	r2, [pc, #476]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e01d      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0xbc>
 8002e2a:	4b72      	ldr	r3, [pc, #456]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a71      	ldr	r2, [pc, #452]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b6f      	ldr	r3, [pc, #444]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0xd4>
 8002e44:	4b6b      	ldr	r3, [pc, #428]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a6a      	ldr	r2, [pc, #424]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b68      	ldr	r3, [pc, #416]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a67      	ldr	r2, [pc, #412]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fd ffec 	bl	8000e40 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fd ffe8 	bl	8000e40 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e200      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xe4>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fd ffd8 	bl	8000e40 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fd ffd4 	bl	8000e40 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1ec      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x10c>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ece:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d11c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x18c>
 8002eda:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x176>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e1c0      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b3d      	ldr	r3, [pc, #244]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4939      	ldr	r1, [pc, #228]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	e03a      	b.n	8002f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <HAL_RCC_OscConfig+0x270>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fd ff8d 	bl	8000e40 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7fd ff89 	bl	8000e40 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e1a1      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4927      	ldr	r1, [pc, #156]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5e:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <HAL_RCC_OscConfig+0x270>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fd ff6c 	bl	8000e40 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fd ff68 	bl	8000e40 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e180      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d03a      	beq.n	800300c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d019      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7fd ff4c 	bl	8000e40 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fac:	f7fd ff48 	bl	8000e40 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e160      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f000 faba 	bl	8003544 <RCC_Delay>
 8002fd0:	e01c      	b.n	800300c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <HAL_RCC_OscConfig+0x274>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd8:	f7fd ff32 	bl	8000e40 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fde:	e00f      	b.n	8003000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe0:	f7fd ff2e 	bl	8000e40 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d908      	bls.n	8003000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e146      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	42420000 	.word	0x42420000
 8002ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003000:	4b92      	ldr	r3, [pc, #584]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e9      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80a6 	beq.w	8003166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301e:	4b8b      	ldr	r3, [pc, #556]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10d      	bne.n	8003046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a87      	ldr	r2, [pc, #540]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	61d3      	str	r3, [r2, #28]
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b82      	ldr	r3, [pc, #520]	; (8003250 <HAL_RCC_OscConfig+0x4c8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003052:	4b7f      	ldr	r3, [pc, #508]	; (8003250 <HAL_RCC_OscConfig+0x4c8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a7e      	ldr	r2, [pc, #504]	; (8003250 <HAL_RCC_OscConfig+0x4c8>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305e:	f7fd feef 	bl	8000e40 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fd feeb 	bl	8000e40 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b64      	cmp	r3, #100	; 0x64
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e103      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	4b75      	ldr	r3, [pc, #468]	; (8003250 <HAL_RCC_OscConfig+0x4c8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x312>
 800308c:	4b6f      	ldr	r3, [pc, #444]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a6e      	ldr	r2, [pc, #440]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	e02d      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x334>
 80030a2:	4b6a      	ldr	r3, [pc, #424]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	4a69      	ldr	r2, [pc, #420]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6213      	str	r3, [r2, #32]
 80030ae:	4b67      	ldr	r3, [pc, #412]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	4a66      	ldr	r2, [pc, #408]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	f023 0304 	bic.w	r3, r3, #4
 80030b8:	6213      	str	r3, [r2, #32]
 80030ba:	e01c      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d10c      	bne.n	80030de <HAL_RCC_OscConfig+0x356>
 80030c4:	4b61      	ldr	r3, [pc, #388]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a60      	ldr	r2, [pc, #384]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6213      	str	r3, [r2, #32]
 80030d0:	4b5e      	ldr	r3, [pc, #376]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a5d      	ldr	r2, [pc, #372]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6213      	str	r3, [r2, #32]
 80030dc:	e00b      	b.n	80030f6 <HAL_RCC_OscConfig+0x36e>
 80030de:	4b5b      	ldr	r3, [pc, #364]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a5a      	ldr	r2, [pc, #360]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	4b58      	ldr	r3, [pc, #352]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	4a57      	ldr	r2, [pc, #348]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 0304 	bic.w	r3, r3, #4
 80030f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d015      	beq.n	800312a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fd fe9f 	bl	8000e40 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fd fe9b 	bl	8000e40 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e0b1      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311c:	4b4b      	ldr	r3, [pc, #300]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ee      	beq.n	8003106 <HAL_RCC_OscConfig+0x37e>
 8003128:	e014      	b.n	8003154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312a:	f7fd fe89 	bl	8000e40 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fd fe85 	bl	8000e40 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e09b      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003148:	4b40      	ldr	r3, [pc, #256]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ee      	bne.n	8003132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b3c      	ldr	r3, [pc, #240]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	4a3b      	ldr	r2, [pc, #236]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8087 	beq.w	800327e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003170:	4b36      	ldr	r3, [pc, #216]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 030c 	and.w	r3, r3, #12
 8003178:	2b08      	cmp	r3, #8
 800317a:	d061      	beq.n	8003240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d146      	bne.n	8003212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003184:	4b33      	ldr	r3, [pc, #204]	; (8003254 <HAL_RCC_OscConfig+0x4cc>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fd fe59 	bl	8000e40 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7fd fe55 	bl	8000e40 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e06d      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a4:	4b29      	ldr	r3, [pc, #164]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b8:	d108      	bne.n	80031cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4921      	ldr	r1, [pc, #132]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a19      	ldr	r1, [r3, #32]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	430b      	orrs	r3, r1
 80031de:	491b      	ldr	r1, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_RCC_OscConfig+0x4cc>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fd fe29 	bl	8000e40 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fd fe25 	bl	8000e40 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e03d      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x46a>
 8003210:	e035      	b.n	800327e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_RCC_OscConfig+0x4cc>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fd fe12 	bl	8000e40 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003220:	f7fd fe0e 	bl	8000e40 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e026      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_OscConfig+0x4c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x498>
 800323e:	e01e      	b.n	800327e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e019      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
 800324c:	40021000 	.word	0x40021000
 8003250:	40007000 	.word	0x40007000
 8003254:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003258:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <HAL_RCC_OscConfig+0x500>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	429a      	cmp	r2, r3
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	429a      	cmp	r2, r3
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000

0800328c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0d0      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a0:	4b6a      	ldr	r3, [pc, #424]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d910      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ae:	4b67      	ldr	r3, [pc, #412]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f023 0207 	bic.w	r2, r3, #7
 80032b6:	4965      	ldr	r1, [pc, #404]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b63      	ldr	r3, [pc, #396]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0b8      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e8:	4b59      	ldr	r3, [pc, #356]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4a58      	ldr	r2, [pc, #352]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003300:	4b53      	ldr	r3, [pc, #332]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a52      	ldr	r2, [pc, #328]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800330a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330c:	4b50      	ldr	r3, [pc, #320]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	494d      	ldr	r1, [pc, #308]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d040      	beq.n	80033ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	4b47      	ldr	r3, [pc, #284]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d115      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e07f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334a:	4b41      	ldr	r3, [pc, #260]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e073      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335a:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06b      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f023 0203 	bic.w	r2, r3, #3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4936      	ldr	r1, [pc, #216]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800337c:	f7fd fd60 	bl	8000e40 <HAL_GetTick>
 8003380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	e00a      	b.n	800339a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fd fd5c 	bl	8000e40 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e053      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 020c 	and.w	r2, r3, #12
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d1eb      	bne.n	8003384 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d210      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 0207 	bic.w	r2, r3, #7
 80033c2:	4922      	ldr	r1, [pc, #136]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b20      	ldr	r3, [pc, #128]	; (800344c <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e032      	b.n	8003442 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4916      	ldr	r1, [pc, #88]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	490e      	ldr	r1, [pc, #56]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341a:	f000 f821 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	490a      	ldr	r1, [pc, #40]	; (8003454 <HAL_RCC_ClockConfig+0x1c8>)
 800342c:	5ccb      	ldrb	r3, [r1, r3]
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1cc>)
 8003434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_RCC_ClockConfig+0x1d0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd fcbe 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40022000 	.word	0x40022000
 8003450:	40021000 	.word	0x40021000
 8003454:	08003cf0 	.word	0x08003cf0
 8003458:	20000000 	.word	0x20000000
 800345c:	20000004 	.word	0x20000004

08003460 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	2300      	movs	r3, #0
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b04      	cmp	r3, #4
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x30>
 800348a:	2b08      	cmp	r3, #8
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x36>
 800348e:	e027      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003492:	613b      	str	r3, [r7, #16]
      break;
 8003494:	e027      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	0c9b      	lsrs	r3, r3, #18
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80034a0:	5cd3      	ldrb	r3, [r2, r3]
 80034a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ae:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	0c5b      	lsrs	r3, r3, #17
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	4a11      	ldr	r2, [pc, #68]	; (8003500 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a0d      	ldr	r2, [pc, #52]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80034c2:	fb03 f202 	mul.w	r2, r3, r2
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e004      	b.n	80034da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a0c      	ldr	r2, [pc, #48]	; (8003504 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034d4:	fb02 f303 	mul.w	r3, r2, r3
 80034d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	613b      	str	r3, [r7, #16]
      break;
 80034de:	e002      	b.n	80034e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80034e2:	613b      	str	r3, [r7, #16]
      break;
 80034e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034e6:	693b      	ldr	r3, [r7, #16]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	371c      	adds	r7, #28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
 80034f8:	007a1200 	.word	0x007a1200
 80034fc:	08003d08 	.word	0x08003d08
 8003500:	08003d18 	.word	0x08003d18
 8003504:	003d0900 	.word	0x003d0900

08003508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800350c:	4b02      	ldr	r3, [pc, #8]	; (8003518 <HAL_RCC_GetHCLKFreq+0x10>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003520:	f7ff fff2 	bl	8003508 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0adb      	lsrs	r3, r3, #11
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40021000 	.word	0x40021000
 8003540:	08003d00 	.word	0x08003d00

08003544 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800354c:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <RCC_Delay+0x34>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	; (800357c <RCC_Delay+0x38>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0a5b      	lsrs	r3, r3, #9
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003560:	bf00      	nop
  }
  while (Delay --);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1e5a      	subs	r2, r3, #1
 8003566:	60fa      	str	r2, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <RCC_Delay+0x1c>
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr
 8003578:	20000000 	.word	0x20000000
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d07d      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a0:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ac:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4a4b      	ldr	r2, [pc, #300]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b6:	61d3      	str	r3, [r2, #28]
 80035b8:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c4:	2301      	movs	r3, #1
 80035c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c8:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d118      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035d4:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a42      	ldr	r2, [pc, #264]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e0:	f7fd fc2e 	bl	8000e40 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	e008      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e8:	f7fd fc2a 	bl	8000e40 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e06d      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003606:	4b36      	ldr	r3, [pc, #216]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d02e      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	429a      	cmp	r2, r3
 8003622:	d027      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003624:	4b2e      	ldr	r3, [pc, #184]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362e:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003634:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800363a:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d014      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fd fbf9 	bl	8000e40 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd fbf5 	bl	8000e40 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e036      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ee      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003674:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4917      	ldr	r1, [pc, #92]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	4313      	orrs	r3, r2
 8003684:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368c:	4b14      	ldr	r3, [pc, #80]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003696:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	490b      	ldr	r1, [pc, #44]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40007000 	.word	0x40007000
 80036e8:	42420440 	.word	0x42420440

080036ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	2300      	movs	r3, #0
 8003706:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b10      	cmp	r3, #16
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b10      	cmp	r3, #16
 8003712:	f200 808a 	bhi.w	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d045      	beq.n	80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d075      	beq.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003722:	e082      	b.n	800382a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003724:	4b46      	ldr	r3, [pc, #280]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800372a:	4b45      	ldr	r3, [pc, #276]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d07b      	beq.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	0c9b      	lsrs	r3, r3, #18
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	4a41      	ldr	r2, [pc, #260]	; (8003844 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003740:	5cd3      	ldrb	r3, [r2, r3]
 8003742:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d015      	beq.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800374e:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	0c5b      	lsrs	r3, r3, #17
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800375a:	5cd3      	ldrb	r3, [r2, r3]
 800375c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003768:	4a38      	ldr	r2, [pc, #224]	; (800384c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	e004      	b.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4a34      	ldr	r2, [pc, #208]	; (8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003784:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003790:	d102      	bne.n	8003798 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	61bb      	str	r3, [r7, #24]
      break;
 8003796:	e04a      	b.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4a2d      	ldr	r2, [pc, #180]	; (8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	61bb      	str	r3, [r7, #24]
      break;
 80037a6:	e042      	b.n	800382e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80037a8:	4b25      	ldr	r3, [pc, #148]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b8:	d108      	bne.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80037c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e01f      	b.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d6:	d109      	bne.n	80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80037e4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	e00f      	b.n	800380c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f6:	d11c      	bne.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80037f8:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003804:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003808:	61bb      	str	r3, [r7, #24]
      break;
 800380a:	e012      	b.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800380c:	e011      	b.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800380e:	f7ff fe85 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8003812:	4602      	mov	r2, r0
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	0b9b      	lsrs	r3, r3, #14
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	3301      	adds	r3, #1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	61bb      	str	r3, [r7, #24]
      break;
 8003828:	e004      	b.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003832:	bf00      	nop
    }
  }
  return (frequency);
 8003834:	69bb      	ldr	r3, [r7, #24]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	08003d1c 	.word	0x08003d1c
 8003848:	08003d2c 	.word	0x08003d2c
 800384c:	007a1200 	.word	0x007a1200
 8003850:	003d0900 	.word	0x003d0900
 8003854:	aaaaaaab 	.word	0xaaaaaaab

08003858 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e093      	b.n	8003994 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d106      	bne.n	8003886 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7fd f9c5 	bl	8000c10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2202      	movs	r2, #2
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800389c:	f023 0307 	bic.w	r3, r3, #7
 80038a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f000 f903 	bl	8003ab8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038da:	f023 0303 	bic.w	r3, r3, #3
 80038de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	021b      	lsls	r3, r3, #8
 80038ea:	4313      	orrs	r3, r2
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80038f8:	f023 030c 	bic.w	r3, r3, #12
 80038fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	4313      	orrs	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	011a      	lsls	r2, r3, #4
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	031b      	lsls	r3, r3, #12
 8003928:	4313      	orrs	r3, r2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4313      	orrs	r3, r2
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d110      	bne.n	80039ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d102      	bne.n	80039d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80039d2:	7b7b      	ldrb	r3, [r7, #13]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d001      	beq.n	80039dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e069      	b.n	8003ab0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ec:	e031      	b.n	8003a52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d110      	bne.n	8003a16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80039f4:	7bbb      	ldrb	r3, [r7, #14]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d102      	bne.n	8003a00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039fa:	7b3b      	ldrb	r3, [r7, #12]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d001      	beq.n	8003a04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e055      	b.n	8003ab0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a14:	e01d      	b.n	8003a52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d108      	bne.n	8003a2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a1c:	7bbb      	ldrb	r3, [r7, #14]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d105      	bne.n	8003a2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a22:	7b7b      	ldrb	r3, [r7, #13]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d102      	bne.n	8003a2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a28:	7b3b      	ldrb	r3, [r7, #12]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e03e      	b.n	8003ab0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_TIM_Encoder_Start+0xc4>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d008      	beq.n	8003a70 <HAL_TIM_Encoder_Start+0xd4>
 8003a5e:	e00f      	b.n	8003a80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2201      	movs	r2, #1
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 f887 	bl	8003b7c <TIM_CCxChannelCmd>
      break;
 8003a6e:	e016      	b.n	8003a9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2201      	movs	r2, #1
 8003a76:	2104      	movs	r1, #4
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 f87f 	bl	8003b7c <TIM_CCxChannelCmd>
      break;
 8003a7e:	e00e      	b.n	8003a9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2201      	movs	r2, #1
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f877 	bl	8003b7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2201      	movs	r2, #1
 8003a94:	2104      	movs	r1, #4
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f870 	bl	8003b7c <TIM_CCxChannelCmd>
      break;
 8003a9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <TIM_Base_SetConfig+0xb8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_Base_SetConfig+0x30>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0x30>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a26      	ldr	r2, [pc, #152]	; (8003b74 <TIM_Base_SetConfig+0xbc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0x30>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a25      	ldr	r2, [pc, #148]	; (8003b78 <TIM_Base_SetConfig+0xc0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d108      	bne.n	8003afa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <TIM_Base_SetConfig+0xb8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00b      	beq.n	8003b1a <TIM_Base_SetConfig+0x62>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b08:	d007      	beq.n	8003b1a <TIM_Base_SetConfig+0x62>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	; (8003b74 <TIM_Base_SetConfig+0xbc>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <TIM_Base_SetConfig+0x62>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <TIM_Base_SetConfig+0xc0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d108      	bne.n	8003b2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <TIM_Base_SetConfig+0xb8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d103      	bne.n	8003b60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	615a      	str	r2, [r3, #20]
}
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	40012c00 	.word	0x40012c00
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800

08003b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2201      	movs	r2, #1
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e046      	b.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00e      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c28:	d009      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d10c      	bne.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800

08003c80 <__libc_init_array>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	2600      	movs	r6, #0
 8003c84:	4d0c      	ldr	r5, [pc, #48]	; (8003cb8 <__libc_init_array+0x38>)
 8003c86:	4c0d      	ldr	r4, [pc, #52]	; (8003cbc <__libc_init_array+0x3c>)
 8003c88:	1b64      	subs	r4, r4, r5
 8003c8a:	10a4      	asrs	r4, r4, #2
 8003c8c:	42a6      	cmp	r6, r4
 8003c8e:	d109      	bne.n	8003ca4 <__libc_init_array+0x24>
 8003c90:	f000 f822 	bl	8003cd8 <_init>
 8003c94:	2600      	movs	r6, #0
 8003c96:	4d0a      	ldr	r5, [pc, #40]	; (8003cc0 <__libc_init_array+0x40>)
 8003c98:	4c0a      	ldr	r4, [pc, #40]	; (8003cc4 <__libc_init_array+0x44>)
 8003c9a:	1b64      	subs	r4, r4, r5
 8003c9c:	10a4      	asrs	r4, r4, #2
 8003c9e:	42a6      	cmp	r6, r4
 8003ca0:	d105      	bne.n	8003cae <__libc_init_array+0x2e>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca8:	4798      	blx	r3
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7ee      	b.n	8003c8c <__libc_init_array+0xc>
 8003cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb2:	4798      	blx	r3
 8003cb4:	3601      	adds	r6, #1
 8003cb6:	e7f2      	b.n	8003c9e <__libc_init_array+0x1e>
 8003cb8:	08003d30 	.word	0x08003d30
 8003cbc:	08003d30 	.word	0x08003d30
 8003cc0:	08003d30 	.word	0x08003d30
 8003cc4:	08003d34 	.word	0x08003d34

08003cc8 <memset>:
 8003cc8:	4603      	mov	r3, r0
 8003cca:	4402      	add	r2, r0
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <memset+0xa>
 8003cd0:	4770      	bx	lr
 8003cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cd6:	e7f9      	b.n	8003ccc <memset+0x4>

08003cd8 <_init>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr

08003ce4 <_fini>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr
